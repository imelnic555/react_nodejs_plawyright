name: CI Pipeline

on:
  push:
    branches:
      - faature/setup_project  # Using your branch name

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug - Print Current Directory
        run: |
          echo "Current directory:"
          pwd
          ls -lah

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: npm

      - name: Install backend dependencies
        working-directory: backend
        run: npm install

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install --force

      - name: Install test dependencies
        working-directory: tests
        run: |
          echo "Installing test dependencies..."
          rm -rf node_modules package-lock.json  # Remove old dependencies
          npm cache clean --force  # Ensure a clean install
          npm install --legacy-peer-deps
          npm install --save-dev @playwright/test @cucumber/cucumber tsx ts-node typescript @types/node
          npm list @playwright/test || { echo "❌ ERROR: @playwright/test is missing!"; exit 1; }
          npm list @cucumber/cucumber || { echo "❌ ERROR: @cucumber/cucumber is missing!"; exit 1; }

  build_backend:
    runs-on: ubuntu-latest
    needs: install_dependencies
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build backend
        working-directory: backend
        run: |
          npm install
          npm run build
          ls -lah dist || { echo "❌ dist/ folder is missing after build!"; exit 1; }
          if [ ! -f dist/main.js ]; then
            echo "❌ ERROR: dist/main.js is missing after build!"
            exit 1
          fi

  build_frontend:
    runs-on: ubuntu-latest
    needs: install_dependencies
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build frontend
        working-directory: frontend
        run: |
          npm install
          npm run build
          ls -lah dist || echo "❌ Build failed! dist/ folder is missing."

  start_backend_and_frontend:
    runs-on: ubuntu-latest
    needs: [build_backend, build_frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Missing Backend Dependencies
        working-directory: backend
        run: npm install

      - name: Start Backend
        working-directory: backend
        run: |
          echo "Starting backend..."
          npm run start > backend.log 2>&1 & echo $! > backend_pid
          sleep 5
          tail -n 20 backend.log || echo "No logs available."

          echo "Verifying backend API..."
          if ! curl -Is http://localhost:3000/users | head -n 1 | grep "HTTP/1.1 200"; then
            echo "❌ ERROR: Backend API is not responding correctly!"
            cat backend.log
            exit 1
          fi

      - name: Start Frontend
        working-directory: frontend
        run: |
          echo "Checking if Vite is installed..."
          if ! test -d node_modules/vite; then
            echo "❌ ERROR: Vite is missing in node_modules! Reinstalling..."
            npm install vite --save-dev --force
          fi

          echo "Starting frontend..."
          npx vite --debug --host > frontend.log 2>&1 & echo $! > frontend_pid
          sleep 5

          if ! curl -Is http://localhost:5173 | head -n 1 | grep "HTTP/1.1 200"; then
            echo "❌ ERROR: Frontend did not start successfully!"
            cat frontend.log
            exit 1
          fi

          tail -n 20 frontend.log || echo "No logs available."

      - name: Wait for Services
        run: |
          echo "Waiting for backend and frontend to be ready..."
          timeout 60 npx wait-on http://localhost:3000/users http://localhost:5173 || {
            echo "❌ Backend or frontend did not start in time!"
            curl -I http://localhost:5173 || echo "❌ Frontend is NOT running!"
            curl -I http://localhost:3000/users || echo "❌ Backend is NOT running!"
            curl http://localhost:3000/users || echo "❌ Backend returned unexpected response!"
            exit 1
          }

  run_tests:
    runs-on: ubuntu-latest
    needs: start_backend_and_frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Playwright Browsers
        working-directory: tests
        run: |
          echo "Installing Playwright browsers..."
          npx playwright install --with-deps

      # - name: Compile TypeScript for Tests
      #   working-directory: tests
      #   run: |
      #     echo "Compiling TypeScript files..."
      #     npx tsc || { echo "❌ ERROR: TypeScript compilation failed!"; exit 1; }

      - name: Ensure `global.d.ts` Exists
        working-directory: tests
        run: |
          echo "Checking if global.d.ts exists..."
          if [ ! -f global.d.ts ]; then
            echo "❌ ERROR: global.d.ts is missing! Creating..."
            echo "declare module '@cucumber/cucumber';" > global.d.ts
            echo "declare module '@playwright/test';" >> global.d.ts
            echo "declare module '../support/world.mjs';" >> global.d.ts
          fi


        
      - name: Run Cucumber & Playwright Tests
        run: npm run test:all


      - name: Run Cucumber Tests
        working-directory: tests
        run: |
          npm install --save-dev @cucumber/cucumber@11.2.0
          echo "Running Cucumber tests..."
          if ! npx @cucumber/cucumber --config ./cucumber.cjs; then
            echo "❌ ERROR: Cucumber tests failed!"
            exit 1
          fi


  stop_backend_and_frontend:
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Stop Backend & Frontend
        run: |
          echo "Stopping backend..."
          kill $(cat backend/backend_pid) || echo "Backend was not running."

          echo "Stopping frontend..."
          kill $(cat frontend/frontend_pid) || echo "Frontend was not running."
