name: CI Pipeline

on:
  push:
    branches:
      - fetaure/setup_project  # Retaining the original branch name

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: npm

      - name: Install backend dependencies
        working-directory: backend
        run: |
          echo "Installing backend dependencies..."
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install
          npm i --save @nestjs/config
          npm install @nestjs/common
          npm install @nestjs/core
          npm install @nestjs/mapped-types
          npm install

      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          echo "Installing frontend dependencies..."
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install
          npm install --save-dev vite-tsconfig-paths

      - name: Install test dependencies
        working-directory: tests
        run: |
          echo "Installing test dependencies..."
          npm install --no-fund
          npm install --save-dev tsx @cucumber/cucumber wait-on
          npx wait-on --version || echo "❌ wait-on not installed!"

  build_backend:
    runs-on: ubuntu-latest
    needs: install_dependencies
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build backend
        working-directory: backend
        run: |
          echo "Building backend..."
          npm install @nestjs/common
          npm install @nestjs/core
          npm run build
          ls -l dist || echo "❌ Build failed! dist/ folder is missing!"

      - name: Cache backend build
        uses: actions/cache@v4
        with:
          path: backend/dist/
          key: ${{ runner.os }}-backend-dist-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-dist-

  build_frontend:
    runs-on: ubuntu-latest
    needs: install_dependencies
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build frontend
        working-directory: frontend
        run: |
          echo "Building frontend..."
          npm install @nestjs/common
          npm install @nestjs/core
          npm run build

      - name: Cache frontend build
        uses: actions/cache@v4
        with:
          path: frontend/build/
          key: ${{ runner.os }}-frontend-build-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-build-

  deploy_and_run_tests:
    runs-on: ubuntu-latest
    needs: [build_backend, build_frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy & Start Backend
        working-directory: backend
        run: |
          echo "Checking if backend build exists..."
          if [ ! -f dist/main.js ]; then
            echo "❌ ERROR: Backend build is missing! Aborting deployment."
            exit 1
          fi
          echo "Deploying backend..."
          scp -r dist/ user@your-server:/var/www/backend
          ssh user@your-server "pm2 restart backend || pm2 start dist/main.js --name backend"

      - name: Deploy & Start Frontend
        working-directory: frontend
        run: |
          echo "Deploying frontend..."
          scp -r build/ user@your-server:/var/www/frontend
          ssh user@your-server "pm2 restart frontend || pm2 start serve --name frontend -- -s build -l 5173"

      - name: Wait for services
        run: |
          echo "Waiting for backend and frontend to be ready..."
          timeout 120 npx wait-on http://your-server:3000 http://your-server:5173 || { echo "❌ Backend or frontend did not start in time!"; exit 1; }

      - name: Install Playwright browsers
        run: |
          echo "Installing Playwright browsers..."
          npx playwright install --with-deps

      - name: Run Cucumber tests
        working-directory: tests
        run: |
          echo "Running Cucumber tests..."
          npx cucumber-js --import tsx

      - name: Shut Down Services After Tests
        run: |
          echo "Shutting down backend and frontend after tests..."
          ssh user@your-server "pm2 stop backend || echo 'Backend not running!'"
          ssh user@your-server "pm2 stop frontend || echo 'Frontend not running!'"
